buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.9.2"
    }
}


apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker-compose'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    maven {
        url "https://dl.bintray.com/eventuateio-oss/eventuate-maven-release"
    }
}

dependencies {

    compile "io.eventuate.tram.core:eventuate-tram-spring-jdbc-kafka:$eventuateTramVersion"
    compile "io.eventuate.tram.core:eventuate-tram-spring-events:$eventuateTramVersion"

    compile "org.elasticsearch.client:transport:6.4.3"

    compile "org.apache.logging.log4j:log4j-api:2.6.2"
    compile "org.apache.logging.log4j:log4j-to-slf4j:2.6.2"

    compile 'javax.el:javax.el-api:2.2.5'

    compile 'mysql:mysql-connector-java:5.1.36'

    compile ('org.postgresql:postgresql:9.4-1200-jdbc41') {
        exclude group: "org.slf4j", module: "slf4j-simple"
    }

    compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    compile "org.springframework.hateoas:spring-hateoas:$springHateoasVersion"

    compile "io.reactivex:rxjava:1.1.5"
    compile "org.apache.httpcomponents:httpclient:4.5"

    compile "io.springfox:springfox-swagger2:2.2.2"
    compile 'io.springfox:springfox-swagger-ui:2.2.2'

    testCompile "junit:junit:4.12"
    testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testCompile 'com.jayway.restassured:rest-assured:2.3.0'
    testCompile "com.jayway.jsonpath:json-path:2.3.0"
    testCompile "io.eventuate.util:eventuate-util-test:$eventuateUtilVersion"
}

dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion
    environment.put "EVENTUATE_JAVA_BASE_IMAGE_VERSION", eventuateExamplesBaseImageVersion

    mysql {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml"]
    }

    mysqlinfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml"]
        startedServices = ["cdc-service", "elasticsearch"]
    }

    postgres {
        projectName = null
        useComposeFiles = ["docker-compose-postgres.yml"]
    }

    postgresinfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-postgres.yml"]
        startedServices = ["cdc-service", "elasticsearch"]
    }
}
